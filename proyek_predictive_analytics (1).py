# -*- coding: utf-8 -*-
"""Proyek Predictive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DjgrHqJtkiJytOayyuo_TZg9V1S4PfJP

# Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from joblib import dump
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix,classification_report

#dataset
df = pd.read_csv('crop_recommendation_dataset.csv')
df.head()

#melihat jumlah data keseluruhan
df.shape

"""# Missing Value"""

df.isnull().sum()

df.duplicated()

"""# Performing Exploratory Data Analysis (EDA)"""

plt.figure(figsize=(10,5))
sns.countplot(x='Crop', data=df, order=df['Crop'].value_counts().index,hue='Crop', palette='viridis')
plt.xticks(rotation=90)
plt.title('Crop Type Distribution')
plt.show()

df['Crop'].value_counts()

df['Soil'].value_counts()

df = pd.get_dummies(df, columns=['Soil'], dtype=np.float64)
df.head()

soil_mapping = {
    'Soil_Acidic Soil': 'Acidic_Soil',
    'Soil_Alkaline Soil': 'Alkaline_Soil',
    'Soil_Loamy Soil': 'Loamy_Soil',
    'Soil_Neutral Soil': 'Neutral_Soil',
    'Soil_Peaty Soil': 'Peaty_Soil'
}
df.rename(columns=soil_mapping,inplace=True)
df.head()

# Boxplots to detect outliers
plt.figure(figsize=(15,8))
for i, col in enumerate(['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon']):
    plt.subplot(2,4,i+1)
    sns.boxplot(y=df[col],color='lime')
    plt.title(f'Boxplot of {col}')
    plt.xlabel('')
    plt.ylabel(col)
plt.tight_layout()
plt.show()

# IQR Method to identify and cap Outliers
def cap_outliers(df,column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df[column] = df[column].clip(lower=lower_bound, upper=upper_bound)


for col in ['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon']:
    cap_outliers(df, col)

# Boxplot
plt.figure(figsize=(15,8))
for i, col in enumerate(['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon']):
    plt.subplot(2, 4, i+1)
    sns.boxplot(y=df[col],color='lime')
    plt.title(f'Boxplot of {col}')
    plt.xlabel('')
    plt.ylabel(col)

plt.tight_layout()
plt.show()

# Histograms for the numerical cols
df[['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon']].hist(bins=15, figsize=(15, 10))
plt.show()

# KDE plots for numerical features
for col in['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon']:
    sns.kdeplot(df[col], fill=True)
    plt.title(f'Distribution of {col}')
    plt.show()

# Select only numeric cols
numeric_data = df.select_dtypes(include=[np.number])
corr_matrix = numeric_data.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Matrix")
plt.show()

# Pairplot
sns.pairplot(
    df,
    vars=['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon'],
    hue='Crop',
    palette='husl'
)
plt.suptitle("Pairplot of Features by Crop Type", y=1.02)
plt.show()

# Boxplots of features grouped by crop
for col in ['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon']:
    plt.figure(figsize=(8, 4))
    sns.boxplot(x='Crop', y=col, data=df)
    plt.xticks(rotation=90)
    plt.title(f'{col} Distribution by Crop Type')
    plt.show()

crop_mean = df.groupby('Crop').mean()
print(crop_mean)

plt.figure(figsize=(24, 12))
sns.heatmap(crop_mean, annot=True, cmap='YlGnBu',fmt='f')
plt.title('Average Feature Values by Crop Type')
plt.show()

df.head()

"""# Encoding Categorical Values"""

label_encoder = LabelEncoder()
df['crop'] = label_encoder.fit_transform(df['Crop'])
df.head()

df['crop'].nunique()

#Scaling all the Numerical Features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df[['Temperature','Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon','Acidic_Soil','Alkaline_Soil','Loamy_Soil','Neutral_Soil','Peaty_Soil']])
X_scaled = pd.DataFrame(scaled_features, columns=['Temperature','Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon','Acidic_Soil','Alkaline_Soil','Loamy_Soil','Neutral_Soil','Peaty_Soil'])
y = df['crop']
df.shape

X_scaled.shape

y.shape

#Splitting the Dataset into Train and Test
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(random_state=42,n_estimators=500)
model.fit(X_train, y_train)

#Accuracy of Model

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test,y_pred)

#Heatmap and Classification Report

plt.figure(figsize=(10,5))
sns.heatmap(cm,annot=True,fmt='d')
plt.title("Heatmap for Different Types of Crops")
plt.show()

print(classification_report(y_test,y_pred))

#Saving Trained Model

dump(model, "crop_recommendation.joblib")
dump(scaler, "scaler.joblib")
dump(label_encoder, "crop_encoder.joblib")