# -*- coding: utf-8 -*-
"""Proyek Predictive Analytic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DjgrHqJtkiJytOayyuo_TZg9V1S4PfJP

## **Proyek Predictive Analytic Arif Kurniawan**

# Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from joblib import dump
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.svm import SVC
from sklearn.preprocessing import MinMaxScaler

"""# Data Understanding

Data Understanding merupakan proses memahami informasi dalam data dan menentukan kualitas dari data tersebut.

## Data Loading

Data Loading merupakan tahap untuk memuat dataset yang akan digunakan agar dataset lebih mudah dipahami. Untuk informasi datasets ini telah di bersihan dan normalisasi terlebih dahulu
"""

#dataset
df = pd.read_csv('crop_recommendation_dataset.csv')
df.head()

"""# Exploratory Data Analysis (EDA)

Exploratory data analysis merupakan proses investigasi awal pada data untuk menganalisis karakteristik, menemukan pola, anomali, dan memeriksa asumsi pada data. Teknik ini biasanya menggunakan bantuan statistik dan representasi grafis atau visualisasi.

## Deskripsi Variabel
"""

#melihat jumlah data keseluruhan
df.shape

"""Dari data di atas dapat melihat bahwa pada dataset ini terdapat 3100 baris dan 10 kolom. Diantaranya:

```Temperature```: Suhu udara (Â°C) yang memengaruhi pertumbuhan tanaman.

```Humidity```: Kelembapan udara (%) yang berpengaruh pada proses transpirasi.

```Rainfall```: Curah hujan (mm), penting untuk kebutuhan air tanaman.

```PH```: Tingkat keasaman tanah, memengaruhi penyerapan unsur hara.

```Nitrogen```: Kandungan nitrogen, mendukung pertumbuhan daun.

```Phosphorous```: Kandungan fosfor, penting untuk akar dan pembungaan.

```Potassium```: Kandungan kalium, membantu ketahanan tanaman.

```Carbon```: Kandungan karbon organik, meningkatkan kesuburan tanah.

```Soil```: Jenis tanah (misal: lempung, pasir), memengaruhi struktur dan drainase.

```Crop```: Jenis tanaman yang menjadi target prediksi.
"""

df.info()

"""* Terdapat 7 kolom numerik dengan tipe float64, yaitu: temperatur, humidity, rainfall, ph, nitrogen, phosphorous, potassium dan carbon color, dan clarity. Ini merupakan fitur numerik yang merupakan hasil pengukuran secara fisik.

* Terdapat 2 kolom dengan tipe data object yaitu: soil dan crop. Kolom ini merupakan categorical features (fitur non-numerik).
"""

df.describe()

"""Fungsi ```describe()``` memberikan informasi statistik pada masing-masing kolom, antara lain:

* ```Count``` adalah jumlah sampel pada data.
* ```Mean``` adalah nilai rata-rata.
* ```Std``` adalah standar deviasi.
* ```Min``` yaitu nilai minimum setiap kolom.
* ```25%``` adalah kuartil pertama. Kuartil adalah nilai yang menandai batas interval dalam empat bagian sebaran yang sama.
* ```50%``` adalah kuartil kedua, atau biasa juga disebut median (nilai tengah).
* ```75%``` adalah kuartil ketiga.
* ```Max``` adalah nilai maksimum.

# Missing Value
"""

df.duplicated().sum()

"""Melihat apakah terdapat data yang terduplikat."""

df.Crop.value_counts(normalize=True)

df.isnull().sum()

data_miss = df[df.isnull().any(axis=1)]
data_miss

"""pada data ini tidak terdapat duplicate"""

df.dropna(inplace=True)
df.isnull().sum().sum()

df.describe()

label_encoder = LabelEncoder()
df['Soil_encoded'] = label_encoder.fit_transform(df['Soil'])

df = df.drop('Soil', axis=1)

df.info()

"""Jumlah data Float64 ada 7, int64 ada 1 dan object ada 1."""

df["Soil_encoded"] = df["Soil_encoded"].astype("float64")

df.info()

"""Dapat di lihat:

Jumlah data Float64 ada 9 dan object ada 1.

**Visualisasi Outlier**
"""

# Boxplots to detect outliers
plt.figure(figsize=(15,8))
# Change the subplot layout to 3 rows and 3 columns to accommodate 9 plots
for i, col in enumerate(['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon', 'Soil_encoded']):
    plt.subplot(3,3,i+1) # Changed from (2,4,i+1) to (3,3,i+1)
    sns.boxplot(y=df[col],color='lime')
    plt.title(f'Boxplot of {col}')
    plt.xlabel('')
    plt.ylabel(col)
plt.tight_layout()
plt.show()

"""Menghapus outliers yang ada pada dataset

Pada kasus ini, kita akan mendeteksi outliers dengan teknik visualisasi data (boxplot). Kemudian, menangani outliers dengan teknik IQR method.
"""

# IQR Method to identify and cap Outliers
def cap_outliers(df,column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df[column] = df[column].clip(lower=lower_bound, upper=upper_bound)


for col in ['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon','Soil_encoded']:
    cap_outliers(df, col)

df.shape

"""Jumlah Datasets setalah di cek tidak mengalami perubahan pada Outlier dan masih pemprosesan sebelumnya: 3100, 10

## Univariate Analysis
"""

# Histograms for the numerical cols
df[['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon','Soil_encoded']].hist(bins=15, figsize=(15, 10))
plt.show()

# KDE plots for numerical features
for col in['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon','Soil_encoded']:
    sns.kdeplot(df[col], fill=True)
    plt.title(f'Distribution of {col}')
    plt.show()

"""## Multivariate Analysis"""

sns.pairplot(df, diag_kind = 'kde')
df[['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon', 'Soil_encoded']]
plt.show()

# Select only numeric cols
numeric_data = df.select_dtypes(include=[np.number])
corr_matrix = numeric_data.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Matrix")
plt.show()

# Pairplot
sns.pairplot(
    df,
    vars=['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon','Soil_encoded'],
    hue='Crop',
    palette='husl'
)
plt.suptitle("Pairplot of Features by Crop Type", y=1.02)
plt.show()

# Boxplots of features grouped by crop
for col in ['Temperature', 'Humidity','Rainfall','PH','Nitrogen', 'Phosphorous', 'Potassium','Carbon']:
    plt.figure(figsize=(8, 4))
    sns.boxplot(x='Crop', y=col, data=df)
    plt.xticks(rotation=90)
    plt.title(f'{col} Distribution by Crop Type')
    plt.show()

"""# Data Preparation

Data Preparation merupakan tahap untuk mempersiapkan data sebelum masuk ke tahap pembuatan model Machine Learning.

## Data Clening
"""

df['crop'] = label_encoder.fit_transform(df['Crop'])

df = df.drop('Crop', axis=1)

df.crop = (df.crop == "rice").astype(int)

x = df.drop("crop",axis=1)
y = df.crop

x.shape,y.shape

df.info()

"""## Train-Test-Split"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=60, stratify=y)

print(f'Total datasets: {len(x)}')
print(f'Total data Latih: {len(x_train)}')
print(f'Total data Uji: {len(x_test)}')

"""## Normalisasi"""

scaler = MinMaxScaler()
scaler.fit(x_train)
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

"""# Model

Lazy Predict Library
LazyPredict adalah pustaka Python yang memudahkan proses pemilihan model machine learning. Ia melakukan ini dengan secara otomatis mengevaluasi dan membandingkan berbagai algoritma pembelajaran mesin pada kumpulan data.

Keuntungan menggunakan LazyPredict:
* Cepat dan efisien: LazyPredict dapat dengan cepat mengevaluasi dan membandingkan banyak model, menghemat waktu dan tenaga.
* Mempermudah identifikasi model potensial: Alih-alih mencoba berbagai model secara manual, LazyPredict membantu menemukan model yang berpotensi berkinerja baik pada data.
* Cocok untuk analisis awal dan pembuatan prototipe: LazyPredict memudahkan untuk memulai dengan proyek machine learning dengan cepat tanpa terjebak dalam detail pemilihan model.
"""

!pip install lazypredict

from lazypredict.Supervised import LazyClassifier
clf = LazyClassifier()
models,predicts = clf.fit(x_train,x_test,y_train,y_test)
print(models.sort_values(by="Accuracy",ascending=False))

"""**Visualisasi Model LazyPredict**"""

temp = models.sort_values(by="Accuracy",ascending=True)
plt.figure(figsize=(10, 8))
plt.barh(temp.index,temp["Accuracy"])
plt.show()

models = pd.DataFrame(index=['accuracy_score'],
                      columns=['KNN', 'RandomForest', 'Naive Bayes'])

"""**KNN (K-Nearest Neighbor)**"""

from sklearn.neighbors import KNeighborsClassifier

model_knn = KNeighborsClassifier(n_neighbors=5, weights='distance')
model_knn.fit(x_train, y_train)

knn_pred = model_knn.predict(x_test)
models.loc['accuracy_score','KNN'] = accuracy_score(y_test, knn_pred)

""" **Random Forest**"""

model_rf = RandomForestClassifier(max_depth= 20)
model_rf.fit(x_train, y_train)

rf_pred = model_rf.predict(x_test)
models.loc['accuracy_score','RandomForest'] = accuracy_score(y_test, rf_pred)

"""**Naive Bayes**"""

from sklearn.naive_bayes import BernoulliNB
model_nb = BernoulliNB()
model_nb.fit(x_train, y_train)

nb_pred = model_nb.predict(x_test)
models.loc['accuracy_score','Naive Bayes'] = accuracy_score(y_test, nb_pred)

"""# Evaluasi Model

**Score Model**
"""

print(models)

"""**Plot Model**"""

plt.bar('KNN', models['KNN'])
plt.bar('RandomForest', models['RandomForest'])
plt.bar('Naive Bayes', models['Naive Bayes'])
plt.title("Perbandingan Akurasi Model");
plt.xlabel('Model');
plt.ylabel('Akurasi');
plt.show()